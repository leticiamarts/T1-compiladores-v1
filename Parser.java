
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\055\000\002\002\003\000\002\002\004\000\002\003" +
    "\003\000\002\004\003\000\002\004\004\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\021\005\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\022\006\000\002\022\006\000\002\022" +
    "\006\000\002\022\006\000\002\011\003\000\002\011\005" +
    "\000\002\012\003\000\002\012\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\010\005\000\002\014\004\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\023\007\000\002" +
    "\023\011\000\002\016\005\000\002\024\013\000\002\025" +
    "\007\000\002\017\007\000\002\017\007\000\002\020\007" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\132\000\026\011\012\013\027\014\006\015\013\016" +
    "\007\030\015\031\030\032\017\033\025\040\026\001\002" +
    "\000\032\002\ufffa\011\ufffa\013\ufffa\014\ufffa\015\ufffa\016" +
    "\ufffa\027\ufffa\030\ufffa\031\ufffa\032\ufffa\033\ufffa\040\ufffa" +
    "\001\002\000\004\040\133\001\002\000\004\034\127\001" +
    "\002\000\004\034\123\001\002\000\004\002\001\001\002" +
    "\000\032\002\ufffb\011\ufffb\013\ufffb\014\ufffb\015\ufffb\016" +
    "\ufffb\027\ufffb\030\ufffb\031\ufffb\032\ufffb\033\ufffb\040\ufffb" +
    "\001\002\000\004\034\115\001\002\000\004\034\106\001" +
    "\002\000\032\002\uffff\011\012\013\027\014\006\015\013" +
    "\016\007\027\uffff\030\015\031\030\032\017\033\025\040" +
    "\026\001\002\000\004\040\ufff8\001\002\000\004\002\104" +
    "\001\002\000\004\040\ufff6\001\002\000\032\002\ufffc\011" +
    "\ufffc\013\ufffc\014\ufffc\015\ufffc\016\ufffc\027\ufffc\030\ufffc" +
    "\031\ufffc\032\ufffc\033\ufffc\040\ufffc\001\002\000\032\002" +
    "\uffe1\011\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1\027\uffe1" +
    "\030\uffe1\031\uffe1\032\uffe1\033\uffe1\040\uffe1\001\002\000" +
    "\032\002\uffdf\011\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf" +
    "\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\040\uffdf\001" +
    "\002\000\032\002\uffde\011\uffde\013\uffde\014\uffde\015\uffde" +
    "\016\uffde\027\uffde\030\uffde\031\uffde\032\uffde\033\uffde\040" +
    "\uffde\001\002\000\032\002\uffdd\011\uffdd\013\uffdd\014\uffdd" +
    "\015\uffdd\016\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033" +
    "\uffdd\040\uffdd\001\002\000\004\040\ufff5\001\002\000\010" +
    "\005\062\006\064\020\063\001\002\000\004\034\033\001" +
    "\002\000\004\040\ufff7\001\002\000\032\002\uffe0\011\uffe0" +
    "\013\uffe0\014\uffe0\015\uffe0\016\uffe0\027\uffe0\030\uffe0\031" +
    "\uffe0\032\uffe0\033\uffe0\040\uffe0\001\002\000\032\002\ufffe" +
    "\011\ufffe\013\ufffe\014\ufffe\015\ufffe\016\ufffe\027\ufffe\030" +
    "\ufffe\031\ufffe\032\ufffe\033\ufffe\040\ufffe\001\002\000\004" +
    "\040\026\001\002\000\004\004\035\001\002\000\006\040" +
    "\037\041\036\001\002\000\032\004\uffee\005\uffee\006\uffee" +
    "\007\uffee\010\uffee\020\uffee\021\uffee\022\uffee\023\uffee\024" +
    "\uffee\025\uffee\035\uffee\001\002\000\032\004\uffed\005\uffed" +
    "\006\uffed\007\uffed\010\uffed\020\uffed\021\uffed\022\uffed\023" +
    "\uffed\024\uffed\025\uffed\035\uffed\001\002\000\016\020\055" +
    "\021\052\022\053\023\057\024\051\025\056\001\002\000" +
    "\004\004\042\001\002\000\004\040\026\001\002\000\004" +
    "\035\044\001\002\000\004\026\045\001\002\000\026\011" +
    "\012\013\027\014\006\015\013\016\007\030\015\031\030" +
    "\032\017\033\025\040\026\001\002\000\032\002\uffd9\011" +
    "\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\027\uffd9\030\uffd9" +
    "\031\uffd9\032\uffd9\033\uffd9\040\uffd9\001\002\000\004\027" +
    "\050\001\002\000\034\002\uffda\011\uffda\012\uffda\013\uffda" +
    "\014\uffda\015\uffda\016\uffda\027\uffda\030\uffda\031\uffda\032" +
    "\uffda\033\uffda\040\uffda\001\002\000\006\040\uffe3\041\uffe3" +
    "\001\002\000\006\040\uffe6\041\uffe6\001\002\000\006\040" +
    "\uffe5\041\uffe5\001\002\000\006\040\037\041\036\001\002" +
    "\000\004\020\060\001\002\000\006\040\uffe2\041\uffe2\001" +
    "\002\000\006\040\uffe4\041\uffe4\001\002\000\006\040\uffe7" +
    "\041\uffe7\001\002\000\006\004\uffe8\035\uffe8\001\002\000" +
    "\004\005\102\001\002\000\010\017\067\040\037\041\036" +
    "\001\002\000\004\006\065\001\002\000\004\004\066\001" +
    "\002\000\036\002\ufff1\004\ufff1\011\ufff1\013\ufff1\014\ufff1" +
    "\015\ufff1\016\ufff1\027\ufff1\030\ufff1\031\ufff1\032\ufff1\033" +
    "\ufff1\035\ufff1\040\ufff1\001\002\000\004\004\101\001\002" +
    "\000\004\004\100\001\002\000\014\004\ufff0\005\072\006" +
    "\073\007\075\010\074\001\002\000\006\040\uffec\041\uffec" +
    "\001\002\000\006\040\uffeb\041\uffeb\001\002\000\006\040" +
    "\uffe9\041\uffe9\001\002\000\006\040\uffea\041\uffea\001\002" +
    "\000\006\040\037\041\036\001\002\000\004\004\uffef\001" +
    "\002\000\036\002\ufff4\004\ufff4\011\ufff4\013\ufff4\014\ufff4" +
    "\015\ufff4\016\ufff4\027\ufff4\030\ufff4\031\ufff4\032\ufff4\033" +
    "\ufff4\035\ufff4\040\ufff4\001\002\000\036\002\ufff3\004\ufff3" +
    "\011\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3\027\ufff3\030" +
    "\ufff3\031\ufff3\032\ufff3\033\ufff3\035\ufff3\040\ufff3\001\002" +
    "\000\004\004\103\001\002\000\036\002\ufff2\004\ufff2\011" +
    "\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2\027\ufff2\030\ufff2" +
    "\031\ufff2\032\ufff2\033\ufff2\035\ufff2\040\ufff2\001\002\000" +
    "\004\002\000\001\002\000\032\002\ufffd\011\ufffd\013\ufffd" +
    "\014\ufffd\015\ufffd\016\ufffd\027\ufffd\030\ufffd\031\ufffd\032" +
    "\ufffd\033\ufffd\040\ufffd\001\002\000\006\017\107\040\110" +
    "\001\002\000\004\035\113\001\002\000\004\035\111\001" +
    "\002\000\004\004\112\001\002\000\032\002\uffd6\011\uffd6" +
    "\013\uffd6\014\uffd6\015\uffd6\016\uffd6\027\uffd6\030\uffd6\031" +
    "\uffd6\032\uffd6\033\uffd6\040\uffd6\001\002\000\004\004\114" +
    "\001\002\000\032\002\uffd7\011\uffd7\013\uffd7\014\uffd7\015" +
    "\uffd7\016\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7" +
    "\040\uffd7\001\002\000\006\040\037\041\036\001\002\000" +
    "\004\035\117\001\002\000\004\026\045\001\002\000\034" +
    "\002\uffdc\011\uffdc\012\121\013\uffdc\014\uffdc\015\uffdc\016" +
    "\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\040\uffdc" +
    "\001\002\000\004\026\045\001\002\000\032\002\uffdb\011" +
    "\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\027\uffdb\030\uffdb" +
    "\031\uffdb\032\uffdb\033\uffdb\040\uffdb\001\002\000\004\040" +
    "\124\001\002\000\004\035\125\001\002\000\004\004\126" +
    "\001\002\000\032\002\uffd5\011\uffd5\013\uffd5\014\uffd5\015" +
    "\uffd5\016\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5" +
    "\040\uffd5\001\002\000\006\040\037\041\036\001\002\000" +
    "\004\035\131\001\002\000\004\026\045\001\002\000\032" +
    "\002\uffd8\011\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\027" +
    "\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\040\uffd8\001\002" +
    "\000\004\004\134\001\002\000\032\002\ufff9\011\ufff9\013" +
    "\ufff9\014\ufff9\015\ufff9\016\ufff9\027\ufff9\030\ufff9\031\ufff9" +
    "\032\ufff9\033\ufff9\040\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\132\000\034\002\015\003\007\004\013\005\031\006" +
    "\004\015\003\017\022\020\023\021\017\022\010\023\020" +
    "\024\030\025\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\005\104\006\004\015\003\017\022\020\023\021\017" +
    "\022\010\023\020\024\030\025\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\033\001\001\000\002\001\001\000\006" +
    "\010\040\012\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\053\001\001\000\002\001\001\000\004" +
    "\022\042\001\001\000\002\001\001\000\004\016\045\001" +
    "\001\000\032\003\046\004\013\005\031\006\004\015\003" +
    "\017\022\020\023\021\017\022\010\023\020\024\030\025" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\067\012\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\011\076\012\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\010\115\012\037\001\001\000\002\001" +
    "\001\000\004\016\117\001\001\000\002\001\001\000\004" +
    "\016\121\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\010\127\012\037\001\001\000\002\001\001\000\004\016" +
    "\131\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static void main(String[] args) {
        try {
            Parser p = new Parser(new Lexer(new java.io.FileReader(args[0])));
            p.parse();
            System.out.println("Parsing completed.");
        } catch (Exception e) {
            System.out.println("Parsing failed: " + e.getMessage());
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programa ::= codigo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // codigo ::= codigo_lista 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // codigo_lista ::= codigo_item 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo_lista",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // codigo_lista ::= codigo_lista codigo_item 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo_lista",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // codigo_item ::= declaracao_identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo_item",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // codigo_item ::= atribuicao_identificador 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo_item",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // codigo_item ::= comandos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo_item",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracao_identificador ::= tipo IDENTIFICADOR SEMI 
            {
              Object RESULT =null;
		 System.out.println("Variável declarada."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracao_identificador",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tipo ::= INTEIRO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipo ::= REAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tipo ::= CARACTER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipo ::= TYPESTRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // atribuicao_identificador ::= IDENTIFICADOR EQUAL expressao_aritmetica SEMI 
            {
              Object RESULT =null;
		 System.out.println("Valor numérico atribuído a um identificador."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atribuicao_identificador",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // atribuicao_identificador ::= IDENTIFICADOR EQUAL STRING SEMI 
            {
              Object RESULT =null;
		 System.out.println("String atribuída a um identificador."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atribuicao_identificador",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // atribuicao_identificador ::= IDENTIFICADOR PLUS PLUS SEMI 
            {
              Object RESULT =null;
		 System.out.println("Variável incrementada."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atribuicao_identificador",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // atribuicao_identificador ::= IDENTIFICADOR MINUS MINUS SEMI 
            {
              Object RESULT =null;
		 System.out.println("Variável decrementada."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atribuicao_identificador",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expressao_aritmetica ::= operando 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao_aritmetica",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expressao_aritmetica ::= operando operador_aritmetico expressao_aritmetica 
            {
              Object RESULT =null;
		 System.out.println("Expressão aritmética encontrada."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao_aritmetica",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // operando ::= NUMERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // operando ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // operador_aritmetico ::= PLUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // operador_aritmetico ::= MINUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // operador_aritmetico ::= TIMES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // operador_aritmetico ::= DIVIDE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expressao_relacional ::= operando operador_relacional operando 
            {
              Object RESULT =null;
		 System.out.println("Expressão relacional encontrada."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressao_relacional",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // operador_relacional ::= EQUAL EQUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // operador_relacional ::= DIFF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // operador_relacional ::= GREATER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // operador_relacional ::= LESSTHAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // operador_relacional ::= GREATEREQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // operador_relacional ::= LESSTHANEQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador_relacional",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // comandos ::= condicional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comandos",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // comandos ::= comando_for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comandos",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // comandos ::= comando_while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comandos",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // comandos ::= comando_printf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comandos",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // comandos ::= comando_scanf 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comandos",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // condicional ::= IF LPAREN expressao_relacional RPAREN bloco_de_comandos 
            {
              Object RESULT =null;
		 System.out.println("Comando IF encontrado."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // condicional ::= IF LPAREN expressao_relacional RPAREN bloco_de_comandos ELSE bloco_de_comandos 
            {
              Object RESULT =null;
		 System.out.println("Comando IF-ELSE encontrado."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // bloco_de_comandos ::= INICIO_BLOCO codigo FIM_BLOCO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloco_de_comandos",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // comando_for ::= FOR LPAREN atribuicao_identificador SEMI expressao_relacional SEMI atribuicao_identificador RPAREN bloco_de_comandos 
            {
              Object RESULT =null;
		 System.out.println("Comando FOR encontrado."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando_for",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // comando_while ::= WHILE LPAREN expressao_relacional RPAREN bloco_de_comandos 
            {
              Object RESULT =null;
		 System.out.println("Comando WHILE encontrado."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando_while",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // comando_printf ::= PRINTF LPAREN STRING RPAREN SEMI 
            {
              Object RESULT =null;
		 System.out.println("Comando PRINTF encontrado."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando_printf",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // comando_printf ::= PRINTF LPAREN IDENTIFICADOR RPAREN SEMI 
            {
              Object RESULT =null;
		 System.out.println("Comando PRINTF encontrado."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando_printf",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // comando_scanf ::= SCANF LPAREN IDENTIFICADOR RPAREN SEMI 
            {
              Object RESULT =null;
		 System.out.println("Comando SCANF encontrado."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comando_scanf",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
