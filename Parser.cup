import java_cup.runtime.*;

parser code {:

public void syntax_error(java_cup.runtime.Symbol currToken) {
      System.out.println("Erro de sintaxe na linha: " + (currToken.left + 1) + ", caractere: " + (currToken.right + 1));
}

:};

/* Terminals (tokens returned by the scanner). */
terminal	SEMI, PLUS, MINUS, TIMES, DIVIDE; 
terminal	IF, ELSE, FOR, WHILE, PRINTF, SCANF, STRING;
terminal	EQUAL, DIFF, GREATER, LESSTHAN, GREATEREQ, LESSTHANEQ;
terminal	INICIO_BLOCO, FIM_BLOCO, INTEIRO, REAL, CARACTER, TYPESTRING;
terminal	LPAREN, RPAREN, AND, OR, IDENTIFICADOR, NUMERO;

/* Non terminals */
non terminal	programa, codigo, codigo_lista, codigo_item, tipo, expressao, expressao_relacional, expressao_aritmetica;
non terminal	operando, operador_aritmetico, operador_relacional;
non terminal	comandos, bloco_de_comandos, comando_printf, comando_scanf;
non terminal	declaracao_identificador, atribuicao_identificador;
non terminal	condicional, comando_for, comando_while;

/* Precedences */
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;

/* The grammar */
programa ::= codigo;

codigo ::= codigo_lista;

codigo_lista ::= codigo_item 
               | codigo_lista codigo_item;

codigo_item ::= declaracao_identificador 
              | atribuicao_identificador 
              | comandos;

declaracao_identificador ::= tipo IDENTIFICADOR SEMI {: System.out.println("Variável declarada."); :};

tipo ::= INTEIRO | REAL | CARACTER | TYPESTRING;

atribuicao_identificador ::= IDENTIFICADOR EQUAL expressao_aritmetica SEMI {: System.out.println("Valor numérico atribuído a um identificador."); :}
                            | IDENTIFICADOR EQUAL STRING SEMI {: System.out.println("String atribuída a um identificador."); :}
                            | IDENTIFICADOR PLUS PLUS SEMI {: System.out.println("Variável incrementada."); :}
                            | IDENTIFICADOR MINUS MINUS SEMI {: System.out.println("Variável decrementada."); :};

expressao_aritmetica ::= operando 
                        | operando operador_aritmetico expressao_aritmetica {: System.out.println("Expressão aritmética encontrada."); :};

operando ::= NUMERO | IDENTIFICADOR; 

operador_aritmetico ::= PLUS | MINUS | TIMES | DIVIDE;

expressao_relacional ::= operando operador_relacional operando {: System.out.println("Expressão relacional encontrada."); :};

operador_relacional ::= EQUAL EQUAL | DIFF | GREATER | LESSTHAN | GREATEREQ | LESSTHANEQ;

comandos ::= condicional | comando_for | comando_while | comando_printf | comando_scanf;

condicional ::= IF LPAREN expressao_relacional RPAREN bloco_de_comandos {: System.out.println("Comando IF encontrado."); :}
              | IF LPAREN expressao_relacional RPAREN bloco_de_comandos ELSE bloco_de_comandos {: System.out.println("Comando IF-ELSE encontrado."); :};

bloco_de_comandos ::= INICIO_BLOCO codigo FIM_BLOCO;

comando_for ::= FOR LPAREN atribuicao_identificador SEMI expressao_relacional SEMI atribuicao_identificador RPAREN bloco_de_comandos {: System.out.println("Comando FOR encontrado."); :};

comando_while ::= WHILE LPAREN expressao_relacional RPAREN bloco_de_comandos {: System.out.println("Comando WHILE encontrado."); :};

comando_printf ::= PRINTF LPAREN STRING RPAREN SEMI {: System.out.println("Comando PRINTF encontrado."); :}
                 | PRINTF LPAREN IDENTIFICADOR RPAREN SEMI {: System.out.println("Comando PRINTF encontrado."); :};

comando_scanf ::= SCANF LPAREN IDENTIFICADOR RPAREN SEMI {: System.out.println("Comando SCANF encontrado."); :};
