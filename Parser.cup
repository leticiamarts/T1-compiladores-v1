import java_cup.runtime.*;
import java.io.*;
import java.util.*;


action code
{:
	AnalisadorSemantico analisadorsemantico = new AnalisadorSemantico();
	GeradorDeCodigo gerador = new GeradorDeCodigo(); 
:};

parser code {:
public static void main(String[] args) {
        try {
            Parser p = new Parser(new Lexer(new java.io.FileReader(args[0])));
            p.parse();
            System.out.println("Parsing completed.");
        } catch (Exception e) {
            System.out.println("Parsing failed: " + e.getMessage());
        }
    }

public void syntax_error(java_cup.runtime.Symbol currToken) {
      System.out.println("Erro de sintaxe na linha: "+(currToken.left+1)+" caracter: " +(currToken.right+1));
}

:};


terminal SEMI, PLUS, MINUS, TIMES, DIVIDE; 
terminal IF, ELSE, FOR, WHILE, PRINTF, SCANF;
terminal EQUAL, DIFF, GREATER, LESSTHAN, GREATEREQ, LESSTHANEQ;
terminal INICIO_BLOCO, FIM_BLOCO, INTEIRO, REAL, CARACTER, STRING;
terminal LPAREN, RPAREN, AND, OR, IDENTIFICADOR, NUMERO, ASSIGN;

non terminal programa, codigo, codigo_lista, codigo_item, tipo, expressao, expressao_relacional, expressao_logica, expressao_aritmetica;
non terminal operando, operador_aritmetico, operador_relacional, operador_logico, dados;
non terminal comandos, bloco_de_comandos, comando_printf, comando_scanf;
non terminal declaracao_identificador, atribuicao_identificador;
non terminal condicional, comando_for, comando_while;

precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;
precedence left LPAREN;
precedence left OR;
precedence left AND;

programa ::= codigo;

codigo ::= codigo_lista;

codigo_lista ::= codigo_item 
               | codigo_lista codigo_item;

codigo_item ::= declaracao_identificador 
              | atribuicao_identificador 
              | comandos;

declaracao_identificador ::= tipo:tipo IDENTIFICADOR:var SEMI 
	{: RESULT = "DECLARACAO DE VARIAVEL [" + var + "] do tipo: " + tipo; analisadorsemantico.inserir_simbolo(var, tipo); :};


tipo ::= INTEIRO {: RESULT = "inteiro"; :}
	| REAL {: RESULT = "real"; :}
	| CARACTER {: RESULT = "char"; :}
	| STRING {: RESULT = "string"; :} ;

dados ::= INTEIRO:data {: RESULT = data; :} 
	| REAL:data {: RESULT = data; :}
	| STRING:data {: RESULT = data; :}
	| CARACTER:data {: RESULT = data; :}; 


expressao::=  atribuicao_identificador:s SEMI {: RESULT = s; :}
	| expressao_relacional:exp_rel {: RESULT = exp_rel; :} 
	| expressao_aritmetica SEMI 
	| expressao_logica 
;

atribuicao_identificador ::= IDENTIFICADOR:ident EQUAL dados:data SEMI
		{: 	if(analisadorsemantico.verificar_atribuicao(ident, data)) RESULT = "variavel: "+ ident + " atribuida a um valor: " + data;
			else RESULT = "ERRO SEMANTICO";   
		:}	     
	| IDENTIFICADOR:ident PLUS PLUS 
		{: 
			if(analisadorsemantico.verificar_incremento_dcremento(ident)) RESULT = "variavel: "+ ident + " incrementada";
			else RESULT = "ERRO SEMANTICO"; 
		:}
	| IDENTIFICADOR:ident MINUS MINUS 
		{: 
			if(analisadorsemantico.verificar_incremento_dcremento(ident)) RESULT = "variavel: "+ ident + " decrementada";
			else RESULT = "ERRO SEMANTICO"; 
		:}
;

expressao_relacional ::= dados:data1 operador_relacional:op dados:data2 SEMI
	{: 
		if(analisadorsemantico.verificar_expressao_relacional_entre_dados(data1, data2, op)) RESULT = data1 + "" + op + "" + data2;
		else RESULT = "ERRO SEMANTICO"; 
	:}
	| IDENTIFICADOR:var1 operador_relacional:op IDENTIFICADOR:var2 
	{: 
		if(analisadorsemantico.verificar_expressao_relacional_entre_variaveis(var1, var2, op)) RESULT = var1 + "" + op + "" + var2;
		else RESULT = "ERRO SEMANTICO"; 
	:}
	| dados:data operador_relacional:op IDENTIFICADOR:var
	{: 
		if(analisadorsemantico.verificar_expressao_relacional_mista(data, var, op)) RESULT =  data + "" + op + "" + var;
		else RESULT = "ERRO SEMANTICO"; 
	:}
	| IDENTIFICADOR:var operador_relacional:op dados:data 
	{: 
		if(analisadorsemantico.verificar_expressao_relacional_mista(data, var, op)) RESULT =  var + "" + op + "" + data;
		else RESULT = "ERRO SEMANTICO"; 
	:}
;

operador_relacional::= EQUAL EQUAL {: RESULT = "="; :}
	| DIFF {: RESULT = "!="; :}
	| GREATER {: RESULT = ">"; :}
	| LESSTHAN {: RESULT = "<"; :}
	| GREATEREQ {: RESULT = ">="; :}
	| LESSTHANEQ {: RESULT = "<="; :}
;

expressao_aritmetica::= operando:op {: RESULT = op; :}
	| operando:op operador_aritmetico expressao_aritmetica {:  RESULT = op; System.out.println("Expressao aritmetica encontrada \n "); :};

operando ::= INTEIRO:op {: RESULT = op; :} | IDENTIFICADOR:op {: RESULT = op; :}| REAL:op {: RESULT = op; :}; 

operador_aritmetico::= PLUS | MINUS | TIMES | DIVIDE;

expressao_logica::= expressao_relacional operador_logico expressao_relacional
		{: System.out.println("Expressao logica encontrada \n "); :};

/* expressao_logica::= LPAREN expressao_relacional RPAREN operador_logico LPAREN expressao_relacional RPAREN 
		{: System.out.println("Expressao logica encontrada \n "); :}; */

operador_logico::= AND | OR ;	
          
comandos::= condicional:c {: RESULT = c; :}
	| comando_for:c {: RESULT = c; :} 
	| comando_while:c {: RESULT = c; :} 
	| comando_printf:c {: RESULT = c; :} 
	| comando_scanf:c {: RESULT = c; :}
;

condicional::= IF LPAREN expressao_relacional:condicao RPAREN bloco_de_comandos:codigo1 ELSE  bloco_de_comandos:codigo2 
			{: 	
				RESULT = "\nComando IF ELSE com a condicao: " + condicao + "\n     se verdadeira executa: " + codigo1 + "\n     senao executa: " + codigo2 + " \n ";
			  	gerador.gerar_condicional(condicao);
			:}
		| IF LPAREN expressao_logica RPAREN bloco_de_comandos ELSE  bloco_de_comandos {: RESULT ="Comando IF ELSE com expressao logica encontrado"; :}
;

bloco_de_comandos::= INICIO_BLOCO comandos:c FIM_BLOCO {: RESULT = c; :};

comando_for::= FOR LPAREN atribuicao_identificador SEMI expressao_relacional SEMI atribuicao_identificador RPAREN bloco_de_comandos 
	{: RESULT = "Comando FOR encontrado"; :};

comando_while::= WHILE LPAREN expressao_relacional RPAREN bloco_de_comandos {: System.out.println("Comando WHILE encontrado\n "); :};

comando_printf::= PRINTF LPAREN STRING:strg RPAREN SEMI {: RESULT = "Comando printf imprimindo " + strg ; gerador.gerar_printf(strg); :} 
	| PRINTF LPAREN IDENTIFICADOR :var RPAREN SEMI{: RESULT = "Comando printf imprime variavel, com valor: " + var; :}
	|PRINTF LPAREN CARACTER:caracter RPAREN SEMI{: RESULT = "Comando printf imprime caracter, com valor: " + caracter; gerador.gerar_printf(caracter);:};

comando_scanf::= SCANF LPAREN IDENTIFICADOR:var RPAREN SEMI 
	{:	if(analisadorsemantico.verificar_scanf(var)) RESULT ="Comando SCANF, lendo a variavel [" + var + "]";
		else RESULT = "ERRO SEMANTICO no SCANF";
	:};